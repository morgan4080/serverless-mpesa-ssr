const fs = require('fs');
const express = require('express');
const path = require('path');
const LRU = require('lru-cache');
const favicon = require('serve-favicon');
const CSRF = require('csurf');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const resolve = file => path.resolve(__dirname, file);
const compression = require('compression');
const microcache = require('route-cache');
const passport = require('passport');
const flash = require('connect-flash');
const bcrypt = require('bcrypt-nodejs');
const LocalStrategy = require('passport-local').Strategy;

const unique = require('./unique');
const AWS = require('aws-sdk');
AWS.config.update({
  region: "ca-central-1",
  endpoint: "http://127.0.0.1:8000"
});

const ddb = new AWS.DynamoDB.DocumentClient();

const tableName = 'user';

function encrypt_password(password) {
  return bcrypt.hash(password, bcrypt.genSaltSync(5), null);
}

function valid_password(password, PW) {
  return bcrypt.compareSync(password, PW);
}

passport.serializeUser((user,done) => {
  done(null, user.id);
});

passport.deserializeUser(( id, done) => {
  ddb.getItem({
    "TableName":tableName,
    "Key": {"id":{"N":id}}
    }, (err,data) => {
    if (err) done(err, data);
    done(err, {"id": data.Item.id.N, "email": data.Item.email.S, "pw": data.Item.pw.S});
  })
});

passport.use('local-signup', new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password',
  passReqToCallback: true
}, (req, email, password, done) => {

  console.log('doing signup');

  const params = {
    "TableName":tableName,
    "IndexName":"email-index",
    "KeyConditions":{
      "email":{
        "ComparisonOperator": "EQ",
        "AttributeValueList": [{"S":email}]
      }
    }
  };

  ddb.query(params, (err,data) => {

    console.log('query', data);

    if (err) return done(err);
    if (data.Items.length > 0) return done(null, false, { message: 'username/email is already taken' });
    const params = {
      "TableName": tableName,
      "Item" : {
        "id": {"N": unique.generateUserId()},
        "email": {"S":email},
        "pw": {"S": encrypt_password(password)}
      }
    };

    ddb.putItem(params, (err, data) => {

      console.log('put', data);

      if (err) {
        return done(null, false, { message: `Apologies, please try again now. + ${ err }` });
      } else {
        return done(null, params.Item);
      }
    })
  })

}));

passport.use('local-signin', new LocalStrategy({
  usernameField : 'email',
  passwordField : 'password',
  passReqToCallback : true
}, (req, email, password, done) => {
  const params = {
    "TableName":tableName,
    "IndexName":"email-index",
    "KeyConditions":{
      "email":{
        "ComparisonOperator":"EQ",
        "AttributeValueList":[{"S":email}]
      }
    }
  };

  ddb.query(params, function(err,data){
    if (err) return done(err);

    if (data.Items.length === 0) return done(null, false, { message: 'No user found.' });

    ddb.getItem({ "TableName": tableName, "Key": { "id":data.Items[0]["id"]} }, (err,data) => {

      if (err) return done(err);

      if (!valid_password(password, data.Item.pw.S)) {

        return done(null, false, { message: `Oops! Wrong password..` });

      } else {

        return done(null, data.Item);

      }
    })
  });

}));

const server = express();

const serverBundle = require('./dist/vue-ssr-server-bundle.json');
const { createBundleRenderer } = require('vue-server-renderer');

// const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
    `express/${require('express/package.json').version} ` +
    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(serverBundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer;

const templatePath = resolve('./src/index.template.html');

// In production: create server renderer using template and built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
const template = fs.readFileSync(templatePath, 'utf-8');

const bundle = serverBundle;
// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
const clientManifest = require('./dist/vue-ssr-client-manifest.json');

renderer = createRenderer(bundle, {
  template,
  clientManifest
});

server.use(express.urlencoded());
server.use(express.json());

server.use(cookieParser());
server.use(session({
  secret: '!@2fpLxthn',
  resave: false,
  saveUninitialized: false
}));

server.use(passport.initialize());
server.use(passport.session());
server.use(flash());

const csrfProtection = CSRF({ cookie: true });
server.use(csrfProtection);

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache &&  0
});

server.use(compression({ threshold: 0 }));
server.use(favicon('./public/logo-48.png'));
server.use('/dist', serve('./dist', true));
server.use('/public', serve('./public', true));
server.use('/manifest.json', serve('./manifest.json', true));
server.use('/service-worker.js', serve('./dist/service-worker.js'));

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
server.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

server.get('*', (req, res, next) => {
  const s = Date.now();

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

    let context = {
        title: 'MUX',
        url: req.url,
        csrfToken: req.csrfToken()
    };

    if (req.originalUrl === '/profile') {
        context['dat'] = 'some dara'
    }
    
    /*if (req.originalUrl === '/signup') {
        context['messages'] = req.flash('error');
      context['hasErrors'] = context['messages'].length > 0

    }*/

  const handleError = err => {

    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err.stack)
    }

  };

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html);
    console.log(`whole request: ${Date.now() - s}ms`)
  })
});

/* passport.authenticate('local-signup', {
  successRedirect : '/profile',
  failureRedirect : '/login',
  failureFlash : true
}));*/

server.post('/signup',
    (req, res, next) => {
      console.log(req.body);
      passport.authenticate('local-signup', { failureFlash : true }, (err, user, info) => {
        req.session.save((err) => {
          if (err) {
            return next(err);
          }
          res.status(200).json({
            test: user,
            test1: info
          });
        });
      })(req, res, next);
    });

server.post('/signin', (req, res, next) => {
  if (req.originalUrl === '/signin') {
    res.status(200).json({
      success: true,
      msg: "signin data received"
    });
  } else {
    console.error(`error during post : ${ req.url }`);
    res.status(500).send('500 | Internal Server Error');
  }
  /*res.redirect('/');*/
});

module.exports = server;