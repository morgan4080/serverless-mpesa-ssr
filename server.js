const fs = require('fs');
const express = require('express');
const path = require('path');
const LRU = require('lru-cache');
const favicon = require('serve-favicon');
const CSRF = require('csurf');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const resolve = file => path.resolve(__dirname, file);
const compression = require('compression');
const microcache = require('route-cache');
const serverBundle = require('./dist/vue-ssr-server-bundle.json');
const { createBundleRenderer } = require('vue-server-renderer');
const isProd = process.env.NODE_ENV === 'production';
const mock = true;
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
    `express/${require('express/package.json').version} ` +
    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

const server = express();

const csrfProtection = CSRF({ cookie: true });

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(serverBundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer;

const templatePath = resolve('./src/index.template.html');

// In production: create server renderer using template and built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
const template = fs.readFileSync(templatePath, 'utf-8');
const bundle = serverBundle;
// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
const clientManifest = require('./dist/vue-ssr-client-manifest.json');
renderer = createRenderer(bundle, {
  template,
  clientManifest
});

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache &&  0
});

server.use(cookieParser());
server.use(session({secret: '!@2fpLxthn', resave: false, saveUninitialized: false}));

server.use(compression({ threshold: 0 }));
server.use(favicon('./public/logo-48.png'));
server.use('/dist', serve('./dist', true));
server.use('/public', serve('./public', true));
server.use('/manifest.json', serve('./manifest.json', true));
server.use('/service-worker.js', serve('./dist/service-worker.js'));

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
server.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));
server.use(csrfProtection);

server.use(function (req, res, next) {
  res.cookie('XSRF-TOKEN', req.csrfToken());
  res.locals._csrf = req.csrfToken();
  next();
});

server.get('*', (req, res) => {
  const s = Date.now();

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error');
      console.error(`error during render : ${req.url}`);
      console.error(err.stack)
    }
  };

  const context = {
    title: 'MUX',
    url: req.url,
    cookies: req.cookies
  };
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html);
    // if (!mock) {
      console.log(`whole request: ${Date.now() - s}ms`)
    // }
  })
});

server.post('signin',(res, req, next) => {
    console.log(req);
    /*res.redirect('/');*/
});


module.exports = server;