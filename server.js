const fs = require('fs');
const express = require('express');
const path = require('path');
const LRU = require('lru-cache');
const favicon = require('serve-favicon');
const CSRF = require('csurf');
const cookieParser = require('cookie-parser');
const session = require('express-session');
const resolve = file => path.resolve(__dirname, file);
const compression = require('compression');
const microcache = require('route-cache');
const passport = require('passport');
const flash = require('connect-flash');
const bcrypt = require('bcrypt-nodejs');
const LocalStrategy = require('passport-local').Strategy;

const unique = require('./unique');
const AWS = require('aws-sdk');

const ddb = new AWS.DynamoDB.DocumentClient({
  region: 'localhost',
  endpoint: 'http://localhost:8000',
});


const tableName = process.env.DYNAMODB_TABLE;

const server = express();

const serverBundle = require('./dist/vue-ssr-server-bundle.json');
const { createBundleRenderer } = require('vue-server-renderer');

// const isProd = process.env.NODE_ENV === 'production';
const useMicroCache = process.env.MICRO_CACHE !== 'false';
const serverInfo =
    `express/${require('express/package.json').version} ` +
    `vue-server-renderer/${require('vue-server-renderer/package.json').version}`;

function createRenderer (bundle, options) {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(serverBundle, Object.assign(options, {
    // for component caching
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
    // recommended for performance
    runInNewContext: false
  }))
}

let renderer;

const templatePath = resolve('./src/index.template.html');

// In production: create server renderer using template and built server bundle.
// The server bundle is generated by vue-ssr-webpack-plugin.
const template = fs.readFileSync(templatePath, 'utf-8');

const bundle = serverBundle;
// The client manifests are optional, but it allows the renderer
// to automatically infer preload/prefetch links and directly add <script>
// tags for any async chunks used during render, avoiding waterfall requests.
const clientManifest = require('./dist/vue-ssr-client-manifest.json');

renderer = createRenderer(bundle, {
  template,
  clientManifest
});

server.use(express.urlencoded());
server.use(express.json());

const opts = {
  table: 'server-glade-sessions',
  AWSConfigJSON: {
      region: 'localhost'
  },
  client: new AWS.DynamoDB({ endpoint: ('http://localhost:8000')})
};

const DynamoDBStore = require('connect-dynamodb')({session: session});

server.use(cookieParser());
server.use(session({
  store: new DynamoDBStore(opts),
  secret: '!@2fpLxthn',
  resave: false,
  cookie: {

  },
  saveUninitialized: false
}));

server.use(passport.initialize());
server.use(passport.session());
server.use(flash());

const csrfProtection = CSRF({ cookie: true });
server.use(csrfProtection);

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache &&  0
});

server.use(compression({ threshold: 0 }));
server.use(favicon('./public/logo-48.png'));
server.use('/dist', serve('./dist', true));
server.use('/public', serve('./public', true));
server.use('/manifest.json', serve('./manifest.json', true));
server.use('/service-worker.js', serve('./dist/service-worker.js'));

// since this app has no user-specific content, every page is micro-cacheable.
// if your app involves user-specific content, you need to implement custom
// logic to determine whether a request is cacheable based on its url and
// headers.
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
server.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl));

// db

function encrypt_password(password) {
  return bcrypt.hashSync(password, bcrypt.genSaltSync(5))
}

function valid_password(password, PW) {
  return bcrypt.compareSync(password, PW);
}

passport.serializeUser(function(user,done) {
  done(null, user.id);
});

passport.deserializeUser(function( id, done) {
  ddb.get({
    TableName:tableName,
    Key: {
      id: id
    }
  }).promise().then( data => {
    done(null, {
      id: data.Item.id.S,
      email: data.Item.email.S,
      pw: data.Item.pw.S
    });
  }).catch(err => {
    if (err) done(err, data);
  })
});

passport.use('local-signup', new LocalStrategy({
  usernameField: 'email',
  passwordField: 'password',
  passReqToCallback: true
}, function (req, email, password, done)  {
  const params = {
    TableName:tableName,
    IndexName:"email-index",
    KeyConditionExpression: "#email = :email",
    ExpressionAttributeNames:{
      "#email": "email"
    },
    ExpressionAttributeValues: {
      ":email":email
    }
  };

  ddb.query(params).promise().then( (data) => {
    if (data.Items.length > 0) return done(null, false, req.flash('message', 'Email is already taken'));

    let id = unique.generateUserId();
    let emailVal = email;
    let pw = encrypt_password(password);

    try {
      const params = {
        TableName: tableName,
        Item : {
          id: id,
          email: emailVal,
          pw: pw
        }
      };

      ddb.put(params).promise().then(() => {
        return done(null, params.Item);
      }).catch((err) => {
        return done(null, false, req.flash('message', 'Apologies, please try again now.'));
      });
    } catch (error) {
      return done(null, error)
    }

  }).catch((err) => {
    return done(err);
  });

}));

passport.use('local-signin', new LocalStrategy({
  usernameField : 'email',
  passwordField : 'password',
  passReqToCallback : true
}, function (req, email, password, done) {
  const params = {
    TableName:tableName,
    IndexName:"email-index",
    KeyConditionExpression: "#email = :email",
    ExpressionAttributeNames:{
      "#email": "email"
    },
    ExpressionAttributeValues: {
      ":email":email
    }
  };

  ddb.query(params).promise().then(data => {

    if (data.Items.length === 0) return done(null, false, req.flash('message', 'User not found.' ));

    ddb.get({
      TableName: tableName,
      Key: {
        id: data.Items[0]["id"]
      }
      }).promise().then(data => {

      if (!valid_password(password, data.Item.pw)) {

        return done(null, false, req.flash(`message`, `Oops! Wrong password..`));

      } else {

        return done(null, data.Item);

      }
    }).catch(err => {
      return done(err)
    })
  }).catch(err => {
    return done(err)

  });

}));

// routes

server.get('*', (req, res, next) => {
  const s = Date.now();

  // protected routes

  if (req.originalUrl === '/profile' && !req.session.authenticated) {
    res.redirect('/login');
  }

  if (req.originalUrl === '/dashboard' && !req.session.authenticated) {
    res.redirect('/login');
  }

  if (req.originalUrl === '/login' && req.session.authenticated) {
    res.redirect('/dashboard');
  }

  if (req.originalUrl === '/signup' && req.session.authenticated) {
    res.redirect('/profile');
  }

  // headers

  res.setHeader("Content-Type", "text/html");
  res.setHeader("Server", serverInfo);

  // render

  let context = {
      title: 'MUX',
      url: req.url,
      csrfToken: req.csrfToken(),
      authenticated: req.session.authenticated
  };

  const handleError = err => {

    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('Page Not Found')
    } else {
      // Render Error Page or Redirect
      console.error(`error during render : ${req.url}`);
      console.error(500, err.stack);
      res.status(500).send('Page Not Found')
    }
  };

  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    }
    res.send(html);
    console.log(`whole request: ${Date.now() - s}ms`)
  });
});

server.post('/signup',
    function (req, res, next) {
      console.log(req.session.id, req.session);

      passport.authenticate('local-signup', { failureFlash : true },(err, user, info) => {

          let outData = {};

          if (req.session.access_times) {
            req.session.access_times++;
            outData['visited'] = req.session.access_times;
          } else {
            req.session.access_times = 1;
            outData['welcome'] = 'Welcome To Saas-Contrive'
          }

          if (user) {
            req.session.authenticated = true;
          }

          req.session.save((err) => {
            if (err) {
              return next(err)
            }

            if (user) {
              req.flash('authenticated', true);
              res.status(200).json({
                info: user,
                authenticated: req.flash('authenticated'),
                message: req.flash('message'),
                redirect: '/profile',
                ...outData
              });
            } else {
              res.status(200).json({
                info: info,
                authenticated: req.session.authenticated,
                message: req.flash('message'),
                redirect: '/signup',
                ...outData
              });
            }

          });
      })(req, res, next);
    });

server.post('/logout',
  function(req, res){
    req.flash('authenticated', false);
    req.session.authenticated = false;
    req.logout();
    res.status(200).json({
      authenticated: req.flash('authenticated'),
      message: 'Bye, Next Time',
      redirect: '/'
    });
  }
);

server.post('/signin',
  function (req, res, next) {
    console.log(req.session.id, req.session);

    passport.authenticate('local-signin', { failureFlash : true },(err, user, info) => {

      let outData = {};

      if (req.session.access_times) {
        req.session.access_times++;
        outData['visited'] = req.session.access_times;
      } else {
        req.session.access_times = 1;
        outData['welcome'] = 'Welcome To Saas-Contrive'
      }

      if (err) {
        return next(err)
      }

      if (user) {
        req.session.authenticated = true;
      }

      if (user) {
        req.flash('authenticated', true);
        res.status(200).json({
          info: user,
          authenticated: req.flash('authenticated'),
          message: req.flash('message'),
          redirect: '/dashboard',
          ...outData
        });
      } else {
        res.status(200).json({
          info: info,
          authenticated: req.session.authenticated,
          message: req.flash('message'),
          redirect: '/login',
          ...outData
        });
      }

    })(req, res, next);
  }
);

module.exports = server;